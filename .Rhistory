quant_categorias))
# Plotando o mapa perceptual
df_ACM_B %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Comp1, y = Comp2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
View(df_coord_obs)
View(df_coord_obs)
print(df_tabela)
# Converter a tabela de frequências para um data frame
df_tabela <- as.data.frame(tabela_frequencias)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
df_tabela$Freq_Acumulada <- cumsum(df_tabela$Frequencia)
df_tabela$Freq_Relativa_Acumulada <- cumsum(df_tabela$Freq_Relativa)
df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
print(df_tabela)
# Converter a tabela de frequências para um data frame
df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
# Calcular as colunas adicionais
df_tabela$Freq_Relativa <- df_tabela$Freq / sum(df_tabela$Freq)
# Exibir a tabela de frequências
print(df_tabela)
# Plotar o gráfico de barras no formato linha x coluna
ggplot(df_tabela, aes(x = as.factor(Valor), y = Freq)) +
geom_tile(aes(fill = Freq), color = "black") +
labs(title = "Gráfico de Barras - Tabela de Frequências",
x = "Valor", y = "Frequência") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Plotar o gráfico de barras no formato linha x coluna
ggplot(df_tabela, aes(x = as.factor(Valor), y = Freq)) +
geom_tile(aes(fill = Freq), color = "black") +
labs(title = "Gráfico de Barras - Tabela de Frequências",
x = "Valor", y = "Frequência") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = CS1, y = CS2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
View(df_tabela)
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Consolidando as coordenadas-padrão obtidas por meio da matriz de Burt
df_ACM_B <- data.frame(ACM$co, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM_B %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Comp1, y = Comp2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
print(df_contagens)
View(df_tabela)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"sjPlot",
"FactoMineR",
"amap",
"readxl",
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4") #função 'ade4' para matriz de distâncias em var. binárias
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
View(df_tabela)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
df_tabela$Freq_Acumulada <- cumsum(df_tabela$Frequencia)
df_tabela$Freq_Relativa_Acumulada <- cumsum(df_tabela$Freq_Relativa)
print(df_tabela)
# Converter a tabela de frequências para um data frame
df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
# Calcular as colunas adicionais
df_tabela$Freq_Relativa <- df_tabela$Freq / sum(df_tabela$Freq)
df_tabela$Freq_Acumulada <- cumsum(df_tabela$Freq)
df_tabela$Freq_Relativa_Acumulada <- cumsum(df_tabela$Freq_Relativa)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
df_tabela$Freq_Acumulada <- cumsum(df_tabela$Frequencia)
df_tabela$Freq_Relativa_Acumulada <- cumsum(df_tabela$Freq_Relativa)
print(df_tabela)
# Converter a tabela de frequências para um data frame
df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
print(df_contagens)
# Converter a tabela de frequências para um data frame
df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
# Converter a tabela de frequências para um data frame
df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
df_tabela <- as.data.frame(frequencia_absoluta)
df_tabela <- as.data.frame(frequencia_absoluta)
print(df_tabela)
# Exemplo com lapply
contagens_por_coluna <- lapply(base, function(x) table(x))
df_contagens <- melt(contagens_por_coluna)
print(df_contagens)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
print(df_tabela)
print(df_contagens)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
#df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
df_tabela$Freq_Acumulada <- cumsum(df_tabela$Frequencia)
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
#df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
#df_tabela$Freq_Acumulada <- cumsum(df_tabela$Frequencia)
df_tabela$Freq_Relativa_Acumulada <- cumsum(df_tabela$Freq_Relativa)
print(df_tabela)
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"sjPlot",
"FactoMineR",
"amap",
"readxl",
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4") #função 'ade4' para matriz de distâncias em var. binárias
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
colnames(df_contagens) <- c("Coluna", "Valor", "Contagem")
print(df_contagens)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
#df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
df_tabela$Freq_Acumulada <- cumsum(df_tabela$Frequencia)
# Adicionar colunas para Frequência Relativa, Frequência Acumulada e Freq. Relativa Acumulada
#df_tabela$Freq_Relativa <- df_tabela$Frequencia / sum(df_tabela$Frequencia)
#df_tabela$Freq_Acumulada <- cumsum(df_tabela$Frequencia)
df_tabela$Freq_Relativa_Acumulada <- cumsum(df_tabela$Freq_Relativa)
print(df_tabela)
# Converter a tabela de frequências para um data frame
df_tabela <- as.data.frame(tabela_frequencias)
# Converter a tabela de frequências para um data frame
#df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
# Calcular as colunas adicionais
df_tabela$Freq_Relativa <- df_tabela$Freq / sum(df_tabela$Freq)
# Calcular as colunas adicionais
#df_tabela$Freq_Relativa <- df_tabela$Freq / sum(df_tabela$Freq)
df_tabela$Freq_Acumulada <- cumsum(df_tabela$Freq)
# Calcular as colunas adicionais
#df_tabela$Freq_Relativa <- df_tabela$Freq / sum(df_tabela$Freq)
#df_tabela$Freq_Acumulada <- cumsum(df_tabela$Freq)
df_tabela$Freq_Relativa_Acumulada <- cumsum(df_tabela$Freq_Relativa)
# Exibir a tabela de frequências
print(df_tabela)
# Plotar o gráfico de barras no formato linha x coluna
ggplot(df_tabela, aes(x = as.factor(Valor), y = Freq)) +
geom_tile(aes(fill = Freq), color = "black") +
labs(title = "Gráfico de Barras - Tabela de Frequências",
x = "Valor", y = "Frequência") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Exibir a tabela de frequências
print(df_tabela)
ggplot(df_tabela, aes(x = as.factor(Valor), y = Freq)) +
geom_tile(aes(fill = Freq), color = "black") +
labs(title = "Gráfico de Barras - Tabela de Frequências",
x = "Valor", y = "Frequência") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(df_tabela)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
# Exibir a tabela de frequências
print(df_tabela)
# Plotar o gráfico de barras no formato linha x coluna
ggplot(df_tabela, aes(x = as.factor(Valor), y = Freq)) +
geom_tile(aes(fill = Freq), color = "black") +
labs(title = "Gráfico de Barras - Tabela de Frequências",
x = "Valor", y = "Frequência") +
scale_fill_gradient(low = "white", high = "blue") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Exibir a tabela de frequências
print(df_tabela)
# Plotar o gráfico de barras com escala de cores discreta
ggplot(df_tabela, aes(x = as.factor(Valor), y = Freq)) +
geom_tile(aes(fill = as.factor(Freq)), color = "black") +  # Converter Freq para fator
labs(title = "Gráfico de Barras - Tabela de Frequências",
x = "Valor", y = "Frequência") +
scale_fill_manual(values = c("white", "blue")) +  # Definir cores manualmente
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"sjPlot",
"FactoMineR",
"amap",
"readxl",
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4") #função 'ade4' para matriz de distâncias em var. binárias
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Exibir a tabela de frequências
print(df_tabela)
# Plotar o gráfico de barras com escala de cores discreta
ggplot(df_tabela, aes(x = as.factor(Valor), y = Freq)) +
geom_tile(aes(fill = as.factor(Freq)), color = "black") +  # Converter Freq para fator
labs(title = "Gráfico de Barras - Tabela de Frequências",
x = "Valor", y = "Frequência") +
scale_fill_manual(values = c("white", "blue")) +  # Definir cores manualmente
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
print(df_contagens)
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor),
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
df_tabela$Valor <- as.numeric(rownames(df_tabela))
df_tabela$Valor <- as.numeric(rownames(df_tabela))
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
# Converter a tabela de frequências para um data frame
#df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
df_tabela$Valor <- as.numeric(rownames(df_tabela))
View(df_tabela)
pacotes <- c("plotly", #plataforma gráfica
"tidyverse", #carregar outros pacotes do R
"ggrepel", #geoms de texto e rótulo para 'ggplot2' que ajudam a
#evitar sobreposição de textos
"knitr", "kableExtra", #formatação de tabelas
"reshape2", #função 'melt'
"misc3d", #gráficos 3D
"plot3D", #gráficos 3D
"cluster", #função 'agnes' para elaboração de clusters hierárquicos
"sjPlot",
"FactoMineR",
"amap",
"readxl",
"factoextra", #função 'fviz_dend' para construção de dendrogramas
"ade4") #função 'ade4' para matriz de distâncias em var. binárias
if(sum(as.numeric(!pacotes %in% installed.packages())) != 0){
instalador <- pacotes[!pacotes %in% installed.packages()]
for(i in 1:length(instalador)) {
install.packages(instalador, dependencies = T)
break()}
sapply(pacotes, require, character = T)
} else {
sapply(pacotes, require, character = T)
}
# Especifique o número desejado de linhas a serem lidas
num_linhas_a_ler <- 1000000  # Substitua pelo número desejado
# Carregamento da base de dados com um número limitado de linhas
base <- read.csv("extract.csv", sep = ";", dec = ".", nrows = num_linhas_a_ler)
base <- base %>%
mutate(Categ_amount = case_when(payment_amount <= quantile(payment_amount, 0.2, na.rm = TRUE) ~ "muito_baixo",
payment_amount > quantile(payment_amount, 0.2, na.rm = TRUE) & payment_amount <= quantile(payment_amount, 0.4, na.rm = TRUE) ~ "baixo",
payment_amount > quantile(payment_amount, 0.4, na.rm = TRUE) & payment_amount <= quantile(payment_amount, 0.6, na.rm = TRUE) ~ "médio",
payment_amount > quantile(payment_amount, 0.6, na.rm = TRUE) & payment_amount <= quantile(payment_amount, 0.8, na.rm = TRUE) ~ "alto",
payment_amount > quantile(payment_amount, 0.8, na.rm = TRUE) ~ "muito_alto"))
base <- base %>%
mutate(Categ_age = case_when(patient_age <= quantile(patient_age, 0.2, na.rm = TRUE) ~ "muito_baixo",
patient_age > quantile(patient_age, 0.2, na.rm = TRUE) & patient_age <= quantile(patient_age, 0.4, na.rm = TRUE) ~ "baixo",
patient_age > quantile(patient_age, 0.4, na.rm = TRUE) & patient_age <= quantile(patient_age, 0.6, na.rm = TRUE) ~ "médio",
patient_age > quantile(patient_age, 0.6, na.rm = TRUE) & patient_age <= quantile(patient_age, 0.8, na.rm = TRUE) ~ "alto",
patient_age > quantile(patient_age, 0.8, na.rm = TRUE) ~ "muito_alto"))
# Vamos remover as variáveis que não utilizaremos (quantitativas)
base <- base %>%
select(-payment_id, -payment_created_at, -payment_amount, -patient_age, - patient_firstName,  -payment_instalments, -payment_secondary_card_type, -payment_card_type, -clinic_concate_name, -payment_is_paid_by_card,-clinic_city)
--------
# A função para a criação da ACM pede que sejam utilizados "fatores"
base <- as.data.frame(unclass(base), stringsAsFactors=TRUE)
--------
# A função para a criação da ACM pede que sejam utilizados "fatores"
base <- as.data.frame(unclass(base), stringsAsFactors=TRUE)
# Definição da quantidade de observações na tabela de contingência
n <- sum(tabela_contingencia)
n
qui2 <- chisq.test(x = tabela_contingencia)
qui2
# Tabela de contingência com frequências absolutas observadas
qui2$observed
# Tabela de contingência com frequências absolutas esperadas
qui2$expected
# Tabela de contingência com frequências absolutas observadas e esperadas
sjt.xtab(var.row = base$Categ_amount,
var.col = base$payment_specialty_name,
show.exp = TRUE)
# Resíduos – diferenças entre frequências absolutas observadas e esperadas
qui2$observed - qui2$expected
# Valores de qui-quadrado por célula
((qui2$observed - qui2$expected)^2)/qui2$expected
# Resíduos padronizados
qui2$residuals
# Resíduos padronizados ajustados
qui2$stdres
--------
# A função para a criação da ACM pede que sejam utilizados "fatores"
base <- as.data.frame(unclass(base), stringsAsFactors=TRUE)
base <- as.data.frame(unclass(base), stringsAsFactors=TRUE)
# Exemplo com lapply
contagens_por_coluna <- lapply(base, function(x) table(x))
colnames(df_contagens) <- c("Coluna", "Valor", "Contagem")
print(df_contagens)
print(df_contagens)
print(df_contagens)
df_tabela <- as.data.frame(frequencia_absoluta)
# Renomear as colunas
colnames(df_tabela) <- c("Valor", "Freq")
# Ordenar o data frame por Valor
df_tabela <- df_tabela[order(df_tabela$Valor), ]
print(df_tabela)
# Converter a tabela de frequências para um data frame
#df_tabela <- as.data.frame(tabela_frequencias)
df_tabela$Valor <- as.numeric(rownames(df_tabela))
# Exibir a tabela de frequências
print(df_tabela)
# Exibir a tabela de frequências
print(df_tabela)
# Analisando as variâncias de cada dimensão
perc_variancia <- (ACM$eig / sum(ACM$eig)) * 100
paste0(round(perc_variancia,2),"%")
# Quantidade de categorias por variável
quant_categorias <- apply(base,
MARGIN =  2,
FUN = function(x) nlevels(as.factor(x)))
# Criando um gráfico de barras para a quantidade de categorias por variável
barplot(quant_categorias,
main = "Quantidade de Categorias por Variável",
xlab = "Variável",
ylab = "Quantidade de Categorias",
col = "skyblue",
border = "black",
names.arg = names(quant_categorias),
las = 2)  # Rotacionando os rótulos no eixo x
# Consolidando as coordenadas-padrão obtidas por meio da matriz binária
df_ACM <- data.frame(ACM$c1, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = CS1, y = CS2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# Consolidando as coordenadas-padrão obtidas por meio da matriz de Burt
df_ACM_B <- data.frame(ACM$co, Variável = rep(names(quant_categorias),
quant_categorias))
print(df_ACM_B)
# Plotando o mapa perceptual
df_ACM_B %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Comp1, y = Comp2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
# Exibir a tabela de frequências
print(df_tabela)
# Consolidando as coordenadas-padrão obtidas por meio da matriz de Burt
df_ACM_B <- data.frame(ACM$co, Variável = rep(names(quant_categorias),
quant_categorias))
# Plotando o mapa perceptual
df_ACM_B %>%
rownames_to_column() %>%
rename(Categoria = 1) %>%
ggplot(aes(x = Comp1, y = Comp2, label = Categoria, color = Variável)) +
geom_point() +
geom_label_repel() +
geom_vline(aes(xintercept = 0), linetype = "longdash", color = "grey48") +
geom_hline(aes(yintercept = 0), linetype = "longdash", color = "grey48") +
labs(x = paste("Dimensão 1:", paste0(round(perc_variancia[1], 2), "%")),
y = paste("Dimensão 2:", paste0(round(perc_variancia[2], 2), "%"))) +
theme_bw()
